@startuml NCC-Multibillion-dollar-project

class Mage {
    - collector : Area3D
    - attractor : Area3D
    - manaManager : ManaManager
    - currentBloodCount : int
    - SPAWNCOST : int = 1
    - selectionState : SelectionState
    - buttons : Button[]
    - entityHolder : Node
    - enemyPrefabs : PackedScene
    - enemyIcons : TextureRects[]
    - isMovingCamera : bool
    - mouseSensitivity : float
    - enemyUnlocks : Map

    enemyPrefabs : GameObjects
    --
    + SpawnMob(pos:Vector3) : void
    + GetSpawnPosition() : Vector3
    + CheckSpawn(pos:Vector3) : bool
    + InitializeLabels() : void
    + UpdateButtonStates() : void
    + UpdateButtonState(butt:Button,canAfford:bool, cost:float,lockvisibility:bool) : void
    + DeductBlood(amount:int) : void
    + HasUnlockedEnemy(enemy:string) : bool
    + UnlockEnemy(enemy:string) : void
    + setters()/getters()...

}

class Entity {
    - health : HealthComponent
    - netTransform : NetworkedTransform
    - healthBar : HealthBar
    - cam : Camera3D


    The Entity class is the main class, from which all mob 
    type (players,zombies,all enemies etc.) inherit

    <i>It may seem weird, that the base entity class holds so little data,</i>
    <i>this is because the Entity class is merely a interface </i>
    <i>with common functions, as health, synchronization etc. is handled by their own components</i>

    --
    # RpcDealDamage(amount:float) : void
    # RpcUpdateHealthBar(h : float,hmax : float) : void
    # RpcDie() : void

    + getters()...
}

class EntityManager {
    - activeEntities : List<Entity>
    --
    + registerEntity(ent:Entity) : void
    + removeEntity(ent:Entity) : void
    + GetShooterForPeerID(id : int) : Shooter
    + GetShooters(): List<Shooter> 
}

class Flamethrower {
    - ammo : int
    - damageArea : Area3D
    - isShooting : bool
    - timeSinceLastShot : float
    - enemiesInDamageZone : List<Entity>
    - damageTicker : Ticker
    - references to the particle systems
    - ticksSinceLastDamage : int
    --

}

class Global {
    --
    + isMage : bool
    + isShooter : bool
    + localShooter : Shooter
    + networkManager : NetworkManager
}

class NetworkManager {
    - moneySpawnPath : Node3D
    - moneyPrefab : PackedScene
    - bloodPrefab : PackedScene
    - shooterPrefab : Shooter
    --
    + PeerConnected(id:long) : void
    + ConnectedToServer() : void
    + ConenctionFailed() : void
    + ServerDisconnected() : void
    + SpawnMoney(pos:Vector3,amount: int) : void
    + SpawnWeapon(name:string, pos:Vector3) : void
    + RpcSpawnWeapon(name:string, pos:Vector3) : void
    + RpcSpawnBlood(pos : Vector3,amount : int) : void
    + RpcEndgameShootersWin() : void

} 

class PopcornBullet {
    <i> No new implementations, only overwrites
}

class Popcorngun {
    <i> No new implementations, only overwrites
}

class PrintInteractable {
    - msg : string
}

class Shooter {
    - weaponManager : WeaponManager
    - currentMoneyCount : int
    - SPEED : float 
    - JOYSTICKDEADZONE : float
    - simulatedJoystickX : float
    - simulatedJoystickY : float
    - isWalking : bool
    - state : ShooterState
    - currentlyTouchingingShooters : int
    - currentInteractable : Interactable
    --
    + Shoot() : void
    + RPCSetActiveWeapon(weaponIndex:int) : void
    + SetSimulatedJoystickInput(x:float,y:float) : void
    + SetSimulatedJoystickRotationInput(rot:Vector2) : void
    + GetKeyboardInputDirection() : Vector3
    + GetJoystickInputDirection() : Vector3
    - IsMouseInViewport(mousePos:Vector2) : bool
    - ProcessMouseRotation(mousePos:Vecto2) : void
    - ProcessJoystickRotation() : void
    + GetLookDirection() : Vector3
    - InitializeLabels() : void
    + RpcDeductMoney(amount:int) : void
    + OnMoneyCollectorCollision(other:Node3D) : void
    - OnMoneyCollectorAreaLeave(other:Node3D) : void
    - HandleDeath() : void
    - RPCPlayWalkAnimation(shouldPlay:bool) : void
    + RpcUpdateMoneyOnOtherPeers(amount:int) : void
    + RpcSetHardRotation(v:Vector3) : void
    + getters()...

}

class Skull {
    - visual : Node3D
}

class Money {
    - moneyAmount : int
    --
    + getters()/setters()...
    + RpcSetAmount(amount : int) : void
    + RpcRemove() : void
}

class Enemy {
    - damage : float
    - movementSpeed : float
    - netWorth : int
    - nav_agent : NavigationAgent3D
    - target : Shooter
    - attackCooldown : float
    - canAttack : bool
    --
    + Update(delta:float) : void
    + Attack() : void
    + ChooseNewTarget () : Shooter
    + setDamage(damage:float) : void
    + setMoveSpeed(speed:float) : void
    + setNetWorth(networth:float) : void
    + getDamage() : float
    + getMoveSpeed() : float
    + getNetworth() : int
}

class BasicEnemy {
    <i> This class only overwrites properties in its _Ready function and doesnt implement anything new.
}

class EnemyShop {
    - costLabel : Label
    - hovered : bool
    + unlockCosts : Map<string,int>
    - references...
    --
    + ShowUnlockCost() : void
    + HideUnlockCost() : void
    + StartGlowEffect() : void
    + StopGlowEffect() : void
    - UpdateLabelPosition() : void    
}

class ChargeEnemy {
    - waitTime : float
    - state : ChargeEnemyState
    - timer : Timer
    --
    + OnTimerFire() : void
    + getters
}

class CrossbowBullet {
    - hitcounter : int
}

class HealthComponent {
    - MaxHealth : float
    - CurrentHealth : float
    --
    - isDead() : void
    + Update() : void
    + Die() : void
    + heal(heal:float) : void
    + ResetDeathHandler() : void
    + ApplyDamage(damage:float) : void
    --
    # <b>signal</b> OnDie()
    # <b>signal</b> OnDamage(amount : float)
    + getters/setters()
}

class Interactable {
    + RpcInteract(peer : int) : void
}

class RevenantEnemy {
    - state : RevenantEnemyState
    --
    + Ticker() : void
}



class HydraEnemy {
    - moveSpeed : float
    - damageArea : Area3D
    - shootersInDamageZone : List<Shooter>
    - damageTimer : Timer
    - timeSinceLastShot : float
    - referencesToParticleSystems...
    --
    - OnDamageZoneEnter(other : Node3D) : void
    - OnDamageZoneLeave(other : Node3D) : void
}


class AbstractWeapon {
    - name : string
    --
    + ShootInput(vel:Vector3) : void
    + Reload() : void
    # RpcShoot(pos:Vector3,direction:Vector3,data:int) : void
    # RpcPlayReloadAnimation() : void

    + OnEnable() : void
    + OnDisable() : void

    + GetWeaponName() : string
}

class Ak47 {

}



class BasicWeapon {
    - shootRate : float (in shots per second)
    - clipSize : int
    - damagePerBullet : float
    - ejectionPoint : Node3D
    --
    + Update() : void
    + ShootAttack() : void
    + CanShoot() : bool
    + Shoot() : void
    + Reload() : void
}

class Bullet {
    - locally_owned : bool
    - velocity : Vector3
    - damage : float
    - aliveTime : float
    - maxLifeTime : float
    --
    + Setup(pos: Vector3,vel: Vector3,damage:float, isLocallySimulated:bool) : void
    + OnHit(e:Entity) : void
    + OnCollision_body(Node3d other) : void
    + OnCollision_area(Node3D other) : void
    + <Signal> Hit(Node3D other) : void
    + getters()...
}



class BloodPrefab {
    amount : float
    lerpTarget : Vector3
    lerpSPeed : float
    --
    + getters/setters

}

class ManaManager {
    - currentMana : float
    - maxMana : float
    - manaRegenerationRate : float
    --
    + Update() : void
    + RemoveMana(sub : float) : void

    + GetCurrentMana() : float
    + GetManaRegeneration() : float
    + SetMaxMana(amount : float) : void
    + SetManaRegeneration(reg : float) : void
}

class WeaponComponent {
    - weapons : AbstractWeapon[]
    - currentWeaponIndex : int
    - hand : Marker3D
    - equippedWeapon : AbstractWeapon
    --
    + ScrollUp() : void
    + ScrollDown() : void
    + GetCurrentWeapon() : Weapon
    + DropCurrentWeapon() : void
    + ShootAction() : void
    + SwitchWeaponTo(index:int) : void
    + HasSpace() : bool
    + RpcEquipWeapon(index:int) : void
    + RpcSetRemoteWeaponCache(index:int,weapon_name:string, nodeName:string) : void
}

class NetworkedTransform {
    - target : Node3D
    - targetRotation : Vector3
    - targetPosition: Vector3
    - updateInterval : float
    - updateTimer : Timer
    --
    + OnTimer() : void
    + RpcUpdatePosition(pos:Vector3,rot:Vector3)
}

class WeaponShop {
    - weaponSpawnPos : Node3D
    - price : int
    - weaponToSell : string
    --

}

class WorldItem {
    - name : string
    - visual : Node3D
    - visualYStartPos : float
    --
    + RpcKill() : void
    + RpcSetPosition(pos:Vector3) : void
    + GetWeaponName() : string
}

class WeaponReg {
    - equipedWeapons : Map
    - worldWeapons : Map
    --
    + GetEquipedWeapon(name:string) : PackedScene
    + GetWorldWeapon(name:string) : PackedScene
}



class Camera3D {
    - zoom : float
}



Shooter -up-|> Entity
Enemy -up-|> Entity
BasicEnemy -up-|> Enemy
ChargeEnemy -up-|> Enemy

Entity::health -[dotted]right-> HealthComponent
Shooter::weaponManager -[dotted]do-> WeaponComponent
BasicWeapon -up-|> AbstractWeapon
HealthComponent -[hidden]right-> BasicWeapon
Mage::manaManager -[dotted]-> ManaManager
BasicWeapon -[hidden]right-> Mage
WeaponComponent -[dotted]-> AbstractWeapon


Shooter -[dotted]-> WeaponComponent::Shoot : Calls on input
WeaponComponent::Shoot -[dotted]-> AbstractWeapon::ShootInput : Calls on input on current weapon

Bullet::OnHit -[dotted]up-> Entity::RpcDealDamage : Calls a RPC on hit
Enemy::Attack -[dotted]up-> Entity::RpcDealDamage : Calls a RPC when shooter is getting hit

BasicWeapon::Shoot -[dotted]-> Bullet : Spawns

Entity -[dotted]-> EntityManager : Register and Unregister


Entity::netTransform -[dotted]-> NetworkedTransform

CrossbowBullet -up-|> Bullet
PopcornBullet -up-|> Bullet

RevenantEnemy -up-|> Enemy
HydraEnemy -up-|> Enemy

PrintInteractable -up-> Interactable
EnemyShop -up-|> Interactable
WeaponShop -up-|> Interactable

Ak47 -up-|> BasicWeapon
Popcorngun -up-|> BasicWeapon
Skull -up-|> AbstractWeapon
Flamethrower -up-|> AbstractWeapon

Mage -[dotted]-> BloodPrefab : collects
WeaponComponent -[dotted]-> WeaponReg : Looks up weapon prefabs
Camera3D -[dotted]-> Shooter : keeps focus on
Shooter -[dotted]-> Money : collects
Shooter -[dotted]-> WorldItem : picks up
WorldItem -[dotted]-> WeaponComponent : adds weapon
NetworkManager -[dotted]-> Shooter : creates
NetworkManager -[dotted]-> Money : spawns

@enduml