@startuml NCC-Multibillion-dollar-project

class Mage {
    manaManager : ManaManager
    enemyPrefabs : GameObjects
    --
    SpawnMob(int type) : void
    Update() : void
}

class Entity {
    - health : HealthComponent
    - netTransform : NetworkedTransform



    The Entity class is the main class, from which all mob 
    type (players,zombies,all enemies etc.) inherit

    <i>It may seem weird, that the base entity class holds so little data,</i>
    <i>this is because the Entity class is merely a interface </i>
    <i>with common functions, as health, synchronization etc. is handled by their own components</i>

    --
    # RpcDealDamage(amount:float) : void
    # RpcPlayAnimation(anim:string,speed : float) : void
    # RpcDie() : void
}

class EntityManager {
    - activeEntities : List<Entity>
    --
    + registerEntity(ent:Entity) : void
    + removeEntity(ent:Entity) : void
}

class Shooter {
    - weaponManager : WeaponManager
    - IsLocalPlayer : bool
    - moneyManager : MoneyBank
    --
    + Shoot() : void
    + RPCSetActiveWeapon(weaponIndex:int) : void

}

class Enemy {
    - damage : float
    - movementSpeed : float
    - netWorth : int
    - nav_agent : NavigationAgent3D
    - target : Shooter
    --
    + Update(delta:float) : void
    + Attack() : void
    + setDamage(damage:float) : void
    + setMoveSpeed(speed:float) : void
    + setNetWorth(networth:float) : void
    + getDamage() : float
    + getMoveSpeed() : float
    + getNetworth() : int
}

class BasicEnemy {
    - moveSpeed : float
    - attackDamage : float
    - currentTarget : Shooter
    --
    + Update() : void
    - FindNearestEnemy(): Shooter
    - DealDamage
}

class ChargeEnemy {
    - waitTime : float
}

class HealthComponent {
    - MaxHealth : float
    - CurrentHealth : float
    --
    - checkIfDead() : void
    + Update() : void
    + Die() : void
    + heal(heal:float) : void
    + ResetDeathHandler() : void
    --
    # <b>signal</b> OnDie()
    # <b>signal</b> OnDamage(amount : float)
}

class AbstractWeapon {
    
    --
    + ShootInput(vel:Vector3) : void
    + Reload() : void
    # RpcShoot(pos:Vector3,direction:Vector3,data:int) : void
    # RpcPlayReloadAnimation() : void

    + OnEnable() : void
    + OnDisable() : void
}

class BasicWeapon {
    - shootRate : float (in shots per second)
    - clipSize : int
    - damagePerBullet : float
    - ejectionPoint : Node3D
    --
    + Update() : void
    + ShootAttack() : void
    + CanShoot() : bool
    + Shoot() : void
    + Reload() : void
}

class Bullet {
    - locally_owned : bool
    - velocity : Vector3
    - damage : float
    - aliveTime : float
    - maxLifeTime : float
    --
    + Setup(pos: Vector3,vel: Vector3,damage:float, isLocallySimulated:bool) : void
    + OnHit(e:Entity) : void
    + OnCollision_body(Node3d other) : void
    + OnCollision_area(Node3D other) : void
    + <Signal> Hit(Node3D other) : void
}

class MoneyPrefab {
    amount : float
    --
    # RpcSetAmount(a : float) : void
    + OnCollision(player : Shooter) : void
}

class BloodPrefab {
    amount : float
    lerpTarget : Vector3
    lerpSPeed : float
    --
    # RpcSetAmount(a : float) : void
    + OnHoverDetected(mage : Mage) : void
    + Process(delta:float) : void
    + getters/setters

}

class ManaManager {
    - currentMana : float
    - maxMana : float
    - manaRegenerationRate : float
    --
    + Update() : void
    + RemoveMana(sub : float) : void

    + GetCurrentMana() : float
    + GetManaRegeneration() : float
    + SetMaxMana(amount : float) : void
    + SetManaRegeneration(reg : float) : void
}

class WeaponComponent {
    - weapons : AbstractWeapon[]
    - currentWeaponIndex : int
    - hand : Marker3D
    --
    + CycleWeaponUp() : void
    + CycleWeaponDown() : void
    + GetCurrentWeapon() : Weapon

    + ShootAction() : void
}

class MoneyBank {
    - currentMoney : float
    --
    + AddMoney(amount:float) : void
    + GetMoney() : float
    + HasAtLeast(amount : float) : void
}

class NetworkedTransform {
    target : Node3D
    lastPosition : Vector3
    targetPosition: Vector3
    --
    + Update() : void
}

class ShooterInput {
    - myPlayer : Shooter
    --
    + Update() : void
}

class WeaponAK47 {
    shootRate = 0.3
    clipSize = 30
    damagePerBullet = 7
    ejectionPoint : Vector3
}


Shooter -up-|> Entity
Enemy -up-|> Entity
BasicEnemy -up-|> Enemy
ChargeEnemy -up-|> Enemy

Entity::health -[dotted]right-> HealthComponent
Shooter::weaponManager -[dotted]do-> WeaponComponent
BasicWeapon -up-|> AbstractWeapon
HealthComponent -[hidden]right-> BasicWeapon
Mage::manaManager -[dotted]-> ManaManager
BasicWeapon -[hidden]right-> Mage
WeaponComponent -[dotted]-> AbstractWeapon

Shooter::moneyManager -[dotted]-> MoneyBank 

Shooter -[dotted]-> WeaponComponent::Shoot : Calls on input
WeaponComponent::Shoot -[dotted]-> AbstractWeapon::ShootInput : Calls on input on current weapon

Bullet::OnHit -[dotted]up-> Entity::RpcDealDamage : Calls a RPC on hit
Enemy::Attack -[dotted]up-> Entity::RpcDealDamage : Calls a RPC when shooter is getting hit

BasicWeapon::Shoot -[dotted]-> Bullet : Spawns

Entity -[dotted]-> EntityManager : Register and Unregister
ShooterInput -[dotted]-> Shooter

Entity::netTransform -[dotted]-> NetworkedTransform

WeaponAK47 -up-|> BasicWeapon

@enduml